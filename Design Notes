1. What is CAP theorem?
  CAP(Consistency-Availability-Partition Tolerance) theorem says that a distributed system cannot guarantee C, A and P simultaneously. It can at max provide any 2 of the 3 guarantees. Let us understand this with the help of a distributed database system. 

  Consistency: This states that the data has to remain consistent after the execution of an operation in the database. For example, post database updation, all queries should retrieve the same result.
  Availability: The databases cannot have downtime and should be available and responsive always.
  Partition Tolerance: The database system should be functioning despite the communication becoming unstable.
  The following image represents what databases guarantee what aspects of the CAP Theorem simultaneously. 
    *We see that RDBMS databases guarantee consistency and Availability simultaneously.
    *Redis, MongoDB, Hbase databases guarantee Consistency and Partition Tolerance.
    *Cassandra, CouchDB guarantees Availability and Partition Tolerance
2. Horizontal scaling vs. Vertical scaling:

Category 	Horizontal Scaling	-- Vertical Scaling
Load Balancing--	Requires load balancing for distributing request traffic across multiple machines.--	Since there is just one single machine, the load balancer is not required.
Failure Resilience	--This is more resistant to application failure because if one server fails, traffic is routed to other servers.--	This is more prone to failure as there is only one machine and failure of this results in failure of the entire application.
Machine Communication	---Since there are multiple machines being involved, it is very much necessary to have network communication.--	Vertical scaling makes use of inter-process communication within the machine which makes it quite fast.
Data Consistency	--There exist possibilities of data inconsistencies here because there are different machines for handling different requests which might result in data being out of sync.	--As there is only one machine, there is no issue of data inconsistency.
Limitations	--Since this scaling requires multiple servers, there might be concerns on budget and space but the scaling of the application can be done as much as needed based on the business needs.	====Vertical scaling has a limit on the capacity of the resources that are achievable. If the resources are scaled up above this limit, then the application might crash and result in downtime.
